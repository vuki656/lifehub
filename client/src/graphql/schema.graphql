# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AuthResponse {
    isUserAuthenticated: Boolean!
    username: String!
}

type CreateTaskPayload {
    task: Task!
}

type Mutation {
    _empty: String
    createReminder(description: String, endDate: String!, startDate: String!, title: String!, username: String!): Reminder!
    createTask(input: TaskInput): CreateTaskPayload!
    createTaskCard(name: String!, username: String!): TaskCard!
    createUser(email: String!, password: String!, passwordConfirmation: String!, username: String!): UserAuth!
    deleteReminder(id: String!): ReminderDeleteResponse!
    deleteTaskCard(id: String!): TaskCardDeleteResponse!
    logInUser(email: String!, password: String!): UserAuth!
    updateReminder(description: String, endDate: String!, id: String!, startDate: String!, title: String!): Reminder!
    updateTaskCard(id: String!, name: String): TaskCard!
}

type Query {
    _empty: String
    getAllTaskCards(username: String!): [TaskCard]!
    getRemindersByDate(selectedDate: String!, username: String!): [Reminder]!
    verifyUser(token: String): AuthResponse
}

type Reminder {
    description: String
    endDate: DateTime!
    id: String!
    startDate: DateTime!
    title: String!
}

type ReminderDeleteResponse {
    id: String!
}

type Task {
    checked: Boolean
    id: String!
    note: String
    taskCardId: String
    taskMetaData: TaskMetaData!
    title: String!
}

type TaskCard {
    id: String!
    name: String!
}

type TaskCardDeleteResponse {
    id: String!
}

type TaskMetaData {
    date: DateTime!
    endDate: DateTime
    id: String!
    isHabbit: Boolean
    isRepeating: Boolean
    nextRepeatingInstance: DateTime
    rrule: String
}

type User {
    email: String!
    id: ID!
    password: String!
    username: String!
}

type UserAuth {
    token: String!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

input TaskInput {
    checked: Boolean
    note: String
    taskCardId: String
    taskMetaData: TaskMetaDataInput!
    title: String!
}

input TaskMetaDataInput {
    date: DateTime!
    endDate: DateTime
    isHabbit: Boolean
    isRepeating: Boolean
    nextRepeatingInstance: DateTime
    rrule: String
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
